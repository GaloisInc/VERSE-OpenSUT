mode = "manage"

[paths]
vhost_device_gpio = "/opt/opensut/bin/vhost-device-gpio"


# MPS
[[process]]
type = "vm"
kvm = true
kernel = "/boot/vmlinuz"
initrd = "/boot/initrd.img"
append = 'earlycon root=/dev/vda2 systemd.unit=opensut-boot.target opensut.app_device=/dev/vdb OPENSUT_EXPECTED_APP_IMAGE_HASH=%%MPS_IMG_HASH%%'

[process.disk.vda]
format = "raw"
path = "/dev/vdc"

[process.disk.vdb]
format = "raw"
path = "/opt/opensut/app/guest_mps.img"
read_only = true

[process.net.bridge]
mode = "bridge"

[process.serial.ttyAMA0]
mode = "passthrough"
device = "/dev/hvc0"

[process.serial.hvc0]
mode = "passthrough"
device = "/dev/hvc4"

# FIXME: under Docker with ubuntu 24.04 base image, QEMU gets SIGBUS when
# vhost-user-gpio is enabled
[process.gpio.gpiochip1]        ##NOT-DOCKER
mode = "passthrough"            ##NOT-DOCKER
device = "/dev/gpiochip1"       ##NOT-DOCKER


# Ardupilot
[[process]]
type = "vm"
kvm = true
kernel = "/boot/vmlinuz"
initrd = "/boot/initrd.img"
append = 'earlycon root=/dev/vda2 systemd.unit=opensut-boot.target opensut.app_device=/dev/vdb OPENSUT_EXPECTED_APP_IMAGE_HASH=%%ARDUPILOT_IMG_HASH%%'

[process.disk.vda]
format = "raw"
path = "/dev/vdd"

[process.disk.vdb]
format = "raw"
path = "/opt/opensut/app/guest_ardupilot.img"
read_only = true

# All components are connected to the bridge interface.
# The virtualized *host* computer has the following interfaces as a result:
# the default interface, socket interface to pass through the terminal output,
# and 4 interfaces for each VM.
# As a result, the guest VMs can reach the outside world through this bridge,
# but it is necessary to allow the autopilot to connect to the flight simulator
# and to the MavProxy.
[process.net.bridge]
mode = "bridge"

[process.serial.ttyAMA0]
mode = "passthrough"
device = "/dev/hvc1"


# MKM
[[process]]
type = "vm"
kvm = true
kernel = "/boot/vmlinuz"
initrd = "/boot/initrd.img"
append = 'earlycon root=/dev/vda2 systemd.unit=opensut-boot.target opensut.app_device=/dev/vdb OPENSUT_EXPECTED_APP_IMAGE_HASH=%%MKM_IMG_HASH%%'

[process.disk.vda]
format = "raw"
path = "/dev/vde"

[process.disk.vdb]
format = "raw"
path = "/opt/opensut/app/guest_mkm.img"
read_only = true

[process.net.bridge]
mode = "bridge"

[process.serial.ttyAMA0]
mode = "passthrough"
device = "/dev/hvc2"


# Logging
[[process]]
type = "vm"
kvm = true
kernel = "/boot/vmlinuz"
initrd = "/boot/initrd.img"
# In this kernel config we tell the logging component the IP address of the Mission Key Management, such that it can request the mission keys,
# as well as the IP of the autopilot, so the logger knows where to get telemetry from.
append = 'earlycon root=/dev/vda2 systemd.unit=opensut-trusted-boot.target opensut.app_device=/dev/vdb opensut.autopilot_host=10.0.2.122 opensut.mkm_host=10.0.2.123 OPENSUT_EXPECTED_APP_IMAGE_HASH=%%LOGGING_IMG_HASH%%'

[process.disk.vda]
format = "raw"
path = "/dev/vdf"

[process.disk.vdb]
format = "raw"
path = "/opt/opensut/app/guest_logging.img"
read_only = true

[process.disk.vdc]
format = "raw"
path = "/dev/vdg"

[process.net.bridge]
mode = "bridge"

# Pass through this VM's output to the console so the user can see when it's
# finished booting.  We can only pass through one VM this way (otherwise the
# output is interleaved in a way that makes it unreadable), so output from the
# other guests is redirected to a file on the base system (via the host's
# /dev/hvc* serial ports).
#[process.serial.ttyAMA0]
#mode = "passthrough"
#device = "/dev/hvc3"
