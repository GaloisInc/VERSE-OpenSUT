# This is a basic workflow to help you get started with Actions

name: Component Build & Test CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:

  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  mps-build:
      runs-on: ubuntu-22.04
      steps:
        - name: Checkout repository and submodules
          uses: actions/checkout@v4
        - name: Install aarch64 toolchain
          run: sudo apt-get install -y {gcc,g++}-aarch64-linux-gnu
        - name: Install verilator
          run: sudo apt-get install -y verilator
        - name: Build MPS
          run: |
            cd components/mission_protection_system/src
            make clean
            # Build, then check it created the correct output file.
            make rts_bottom CONFIG=self_test
            [ -f rts_bottom.self_test ]
            make rts CONFIG=self_test
            [ -f rts.self_test ]
            make rts CONFIG=no_self_test
            [ -f rts.no_self_test ]
            make rts CONFIG=self_test TARGET=aarch64
            [ -f rts.self_test.aarch64 ]
            make rts CONFIG=no_self_test TARGET=aarch64
            [ -f rts.no_self_test.aarch64 ]
        - name: Upload MPS binaries
          uses: actions/upload-artifact@v4
          with:
            name: mps-binaries
            path: components/mission_protection_system/src/rts.*

  mps-test:
    runs-on: ubuntu-22.04
    needs: mps-build
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
      - name: Download MPS binaries
        uses: actions/download-artifact@v4
        with:
          name: mps-binaries
      - name: Display structure of downloaded files
        run: |
          chmod +x rts.*
          mv rts.* components/mission_protection_system/src/.
      - name: Install pip3
        run: sudo apt-get install -y python3-pip
      - name: Test MPS
        run: |
          cd components/mission_protection_system/tests
          pip3 install -r requirements.txt
          RTS_DEBUG=1 QUICK=1 python3 ./run_all.py

  vm_runner:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Hash inputs
      run: |
        cache_key="$(bash src/pkvm_setup/package.sh cache_key vm_runner)"
        echo "Cache key: $cache_key"
        echo "CACHE_KEY=$cache_key" >>$GITHUB_OUTPUT
        echo "CACHE_KEY=$cache_key" >>$GITHUB_ENV
    - name: Cache results
      id: cache
      uses: actions/cache@v3
      with:
        key: ${{ env.CACHE_KEY }}
        path: packages/${{ env.CACHE_KEY }}.tar.gz
    - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      name: Install aarch64 toolchain
      run: sudo apt-get install -y gcc-aarch64-linux-gnu
    - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      uses: hecrj/setup-rust-action@v2
      with:
        rust-version: 1.74
        targets: aarch64-unknown-linux-gnu
    - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      name: Build VM runner
      run: |
        bash src/pkvm_setup/package.sh full_build vm_runner

  vhost-device:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Checkout submodules
      run: |
        git config --global url."https://podhrmic:${{ secrets.VERSE_VHOST_DEVICE_ACCESS_TOKEN }}@github.com/".insteadOf "git@github.com:"
        git submodule update --init src/pkvm_setup/libgpiod
        git submodule update --init src/pkvm_setup/vhost-device
    - name: Hash inputs
      run: |
        cache_key="$(bash src/pkvm_setup/package.sh cache_key vhost_device)"
        echo "Cache key: $cache_key"
        echo "CACHE_KEY=$cache_key" >>$GITHUB_OUTPUT
        echo "CACHE_KEY=$cache_key" >>$GITHUB_ENV
    - name: Cache results
      id: cache
      uses: actions/cache@v3
      with:
        key: ${{ env.CACHE_KEY }}
        path: packages/${{ env.CACHE_KEY }}.tar.gz
    - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      name: Install dependency packages
      run: |
        sudo apt-get install -y \
          build-essential autoconf automake autoconf-archive \
          gcc-aarch64-linux-gnu
    - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      uses: hecrj/setup-rust-action@v2
      with:
        rust-version: 1.74
        targets: aarch64-unknown-linux-gnu
    - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      name: Build libgpiod
      run: |
        # This must match the `rust-version` installed above.
        export RUSTUP_TOOLCHAIN=1.74
        bash src/pkvm_setup/package.sh full_build vhost_device

#  linux-pkvm:
#    runs-on: ubuntu-22.04
#    steps:
#    - uses: actions/checkout@v4
#    - name: Checkout submodules
#      run: |
#        git submodule update --init src/pkvm_setup/linux-pkvm
#    - name: Hash inputs
#      run: |
#        hash="$(
#          (
#            (cd src/pkvm_setup/linux-pkvm/; git rev-parse HEAD)
#            sha1sum src/pkvm_setup/build_pkvm.sh
#          ) | sha1sum
#        )"
#        cache_key="linux-pkvm-$hash"
#        echo "Cache key: $cache_key"
#        echo "CACHE_KEY=$cache_key" >>$GITHUB_OUTPUT
#        echo "CACHE_KEY=$cache_key" >>$GITHUB_ENV
#    - name: Cache results
#      id: cache
#      uses: actions/cache@v3
#      with:
#        key: ${{ env.CACHE_KEY }}
#        path: |
#          src/pkvm_setup/linux*pkvm*_arm64.deb
#          !src/pkvm_setup/*pkvm-verif*.deb
#    - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
#      name: Install dependency packages
#      run: |
#        sudo apt-get install -y build-essential debhelper gcc-aarch64-linux-gnu
#    - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
#      name: Build linux-pkvm
#      run: |
#        cd src/pkvm_setup
#        bash build_pkvm.sh
